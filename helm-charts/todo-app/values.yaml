# Default values for todo-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  imageRegistry: ghcr.io/keremar
  image: {}
  imagePullSecrets:
    name: github-registry-secret


# User Service Configuration
userService:
  enabled: true
  name: user-service
  image:
    repository: todo-app-user-service
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8001
    targetPort: 8001
  deployment:
    replicas: 1
  env:
    secretKey: "dev-secret-key-change-in-production"
  probes:
    liveness:
      httpGet:
        path: /health
        port: 8001
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
    readiness:
      httpGet:
        path: /health
        port: 8001
      initialDelaySeconds: 5
      periodSeconds: 10

# User Database Configuration (PostgreSQL)
userDatabase:
  enabled: true
  name: user-db
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  service:
    port: 5432
  env:
    database: userdb
    username: userservice
    password: userpass
  storage: 1Gi
  storageClass: ""
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Todo Service Configuration
todoService:
  enabled: true
  name: todo-service
  image:
    repository: todo-app-todo-service
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8002
    targetPort: 8002
  deployment:
    replicas: 1
  env:
    secretKey: "dev-secret-key-change-in-production"
    userServiceUrl: "http://user-service:8001"
  probes:
    liveness:
      httpGet:
        path: /health
        port: 8002
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
    readiness:
      httpGet:
        path: /health
        port: 8002
      initialDelaySeconds: 5
      periodSeconds: 10

# Todo Database Configuration (PostgreSQL)
todoDatabase:
  enabled: true
  name: todo-db
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  service:
    port: 5432
  env:
    database: tododb
    username: todoservice
    password: todopass
  storage: 1Gi
  storageClass: ""
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Frontend Configuration
frontend:
  enabled: true
  name: frontend
  image:
    repository: todo-app-frontend
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  deployment:
    replicas: 1
  caddyfile: |
    :3000 {
        # Security headers (apply to all responses)
        header {
            X-Frame-Options SAMEORIGIN
            X-Content-Type-Options nosniff
            X-XSS-Protection "1; mode=block"
        }

        # Compression
        encode gzip zstd

        # API Reverse Proxy - Must come BEFORE file_server!
        handle /register {
            reverse_proxy http://user-service:8001
        }

        handle /login {
            reverse_proxy http://user-service:8001
        }

        handle /users* {
            reverse_proxy http://user-service:8001
        }

        handle /admin* {
            reverse_proxy http://user-service:8001
        }

        handle /todos* {
            reverse_proxy http://todo-service:8002
        }

        # Static files and SPA routing
        handle {
            root * /usr/share/caddy

            # Cache static assets
            @static path *.js *.css *.png *.jpg *.jpeg *.gif *.ico *.svg *.woff *.woff2 *.ttf *.eot
            header @static Cache-Control "public, max-age=31536000, immutable"

            # Try to serve file, otherwise serve index.html (SPA routing)
            try_files {path} /index.html
            file_server
        }
    }

# Ingress Configuration
ingress:
  enabled: true
  className: nginx
  host: todo-app.local
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
  paths:
    - path: /
      pathType: Prefix
      service: frontend
      port: 3000
    - path: /register
      pathType: Prefix
      service: user-service
      port: 8001
    - path: /login
      pathType: Prefix
      service: user-service
      port: 8001
    - path: /users
      pathType: Prefix
      service: user-service
      port: 8001
    - path: /todos
      pathType: Prefix
      service: todo-service
      port: 8002
    - path: /admin
      pathType: Prefix
      service: user-service
      port: 8001

# Resource limits and requests (optional)
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
